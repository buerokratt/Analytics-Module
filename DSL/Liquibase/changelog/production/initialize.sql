-- liquibase formatted sql

-- changeset liquibase:1719305107887
CREATE TYPE overview_metric AS ENUM ('avg_chats_by_month', 'avg_chats_by_week', 'avg_chats_no_csa_by_month', 'avg_chats_no_csa_by_week', 'total_chats_no_csa_day', 'total_chats_month', 'total_chats_day', 'total_forwarded_chats_yesterday', 'avg_waiting_time_day', 'avg_waiting_time_week');

CREATE TABLE "user_overview_metric_preference" ("id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, "user_id_code" VARCHAR(50) NOT NULL, "metric" OVERVIEW_METRIC NOT NULL, "ordinality" INTEGER DEFAULT 0 NOT NULL, "active" BOOLEAN DEFAULT FALSE NOT NULL, CONSTRAINT "user_overview_metric_preference_pkey" PRIMARY KEY ("id"));

INSERT INTO user_overview_metric_preference (user_id_code, metric, ordinality, active)
SELECT DISTINCT "user".id_code,
    metric,
    "ordinality",
    "ordinality" <= 6
FROM unnest(enum_range(NULL::overview_metric)) WITH ordinality metric
    CROSS JOIN "user";

ALTER TABLE message ADD COLUMN intent VARCHAR(50) NULL;

CREATE TABLE "scheduled_reports" ("id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, "name" VARCHAR(150) NOT NULL, "dataset_id" VARCHAR(150) NOT NULL, "period" VARCHAR(50) NOT NULL, "metrics" TEXT[] NOT NULL, "created" TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL, "updated" TIMESTAMP WITH TIME ZONE DEFAULT NOW(), "start_date" VARCHAR(150), "end_date" VARCHAR(150), "deleted" BOOLEAN DEFAULT FALSE NOT NULL, CONSTRAINT "scheduled_reports_pkey" PRIMARY KEY ("id"));

ALTER TABLE configuration ALTER COLUMN "value" TYPE varchar(300) USING value::varchar;

CREATE INDEX IF NOT EXISTS idx_chat_created ON chat (created);

CREATE INDEX IF NOT EXISTS idx_message_chat_base_id ON message (chat_base_id);

CREATE INDEX IF NOT EXISTS idx_chat_base_id ON chat (base_id);

-- changeset liquibase:1719305107888 splitStatements:false
CREATE OR REPLACE FUNCTION set_user_overview_metric_defaults() RETURNS TRIGGER AS $$
DECLARE BEGIN
INSERT INTO user_overview_metric_preference (user_id_code, metric, "ordinality", active)
SELECT new.id_code,
    metric,
    "ordinality",
    "ordinality" <= 6
FROM unnest(enum_range(NULL::overview_metric)) WITH ORDINALITY metric;
RETURN new;
END;
$$ language plpgsql;

CREATE TRIGGER overview_metric_defaults_on_user_insert
AFTER
INSERT ON "user" FOR each ROW EXECUTE PROCEDURE set_user_overview_metric_defaults();
