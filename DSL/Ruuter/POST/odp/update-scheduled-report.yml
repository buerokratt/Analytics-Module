declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'UPDATE-SCHEDULED-REPORT'"
  method: post
  accepts: json
  returns: json
  namespace: analytics
  allowlist:
    body:
      - field: access
        type: string
        description: "Body field 'access'"
      - field: categoryIds
        type: array
        description: "Body field 'categoryIds'"
      - field: dataFrom
        type: string
        description: "Body field 'dataFrom'"
      - field: datasetId
        type: string
        description: "Body field 'datasetId'"
      - field: descriptionEn
        type: string
        description: "Body field 'descriptionEn'"
      - field: descriptionEt
        type: string
        description: "Body field 'descriptionEt'"
      - field: end
        type: string
        description: "Body field 'end'"
      - field: keywordIds
        type: array
        description: "Body field 'keywordIds'"
      - field: licenceId
        type: string
        description: "Body field 'licenceId'"
      - field: maintainer
        type: string
        description: "Body field 'maintainer'"
      - field: maintainerEmail
        type: string
        description: "Body field 'maintainerEmail'"
      - field: nameEn
        type: string
        description: "Body field 'nameEn'"
      - field: nameEt
        type: string
        description: "Body field 'nameEt'"
      - field: regionIds
        type: array
        description: "Body field 'regionIds'"
      - field: start
        type: string
        description: "Body field 'start'"
      - field: updateIntervalFrequency
        type: number
        description: "Body field 'updateIntervalFrequency'"
      - field: updateIntervalUnit
        type: string
        description: "Body field 'updateIntervalUnit'"

getKey:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-odp-settings"
  result: settings
  
authenticate:
  call: http.post
  args:
    url: "[#ANALYTICS_OPEN_DATA_SERVICE]/api/auth/key-login"
    headers:
      X-API-KEY: ${settings.response.body[0].odpKey}
  result: apiToken

updateDataset:
  call: http.put
  args:
    url: "[#ANALYTICS_OPEN_DATA_SERVICE]/api/organizations/my-organizations/${settings.response.body[0].odpOrgId}/datasets/${incoming.body.datasetId}"
    body:
      nameEt: ${incoming.body.nameEt}
      nameEn: ${incoming.body.nameEn}
      descriptionEt: ${incoming.body.descriptionEt}
      descriptionEn: ${incoming.body.descriptionEn}
      maintainer: ${incoming.body.maintainer}
      maintainerEmail: ${incoming.body.maintainerEmail}
      regionIds: ${incoming.body.regionIds}
      keywordIds: ${incoming.body.keywordIds}
      categoryIds: ${incoming.body.categoryIds}
      updateIntervalUnit: ${incoming.body.updateIntervalUnit}
      updateIntervalFrequency: ${incoming.body.updateIntervalFrequency}
      dataFrom: ${incoming.body.dataFrom}
      access: ${incoming.body.access}
      licenceId: ${incoming.body.licenceId}
    headers:
      Authorization: ${'Bearer ' + apiToken.response.body.data.accessToken}
  result: datasetUpdate  

getJobDetails:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-scheduled-report"
    body:
      datasetId: ${incoming.body.datasetId}
  result: jobDetails

removePreviousSchedule:
  template: odp/delete-scheduled-report
  body:
    datasetId: ${incoming.body.datasetId}
  requestType: post
  result: removePrevious

saveJobInformation:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/add-scheduled-report"
    body:
      name: ${incoming.body.nameEt}
      period: ${incoming.body.updateIntervalUnit}
      metrics: ${jobDetails.response.body[0].metrics}
      dataset_id: ${incoming.body.datasetId}
      start_date: ${incoming.body.start}
      end_date: ${incoming.body.end}
  result: scheduledReport

check-for-interval:
  switch:
    - condition: ${incoming.body.updateIntervalUnit === 'never'}
      next: delete-schedule
  next: refreshCronManagerIfChanged

delete-schedule:
  call: http.post
  args:
    url: "[#ANALYTICS_RUUTER]/odp/delete-scheduled-report"
    body:
      datasetId: ${incoming.body.datasetId}
  result: delete_res
  next: refreshCronManagerIfChanged

refreshCronManagerIfChanged:
  call: http.post
  args:
    url: "[#CRON_MANAGER]/reload/CronManager"
  result: cronResult 
  next: return_post_schedule

return_post_schedule:
  return: ${scheduledReport.response.body[0]}
  next: end
