check_for_cookie:
  switch:
    - condition: ${incoming.headers.cookie == null || incoming.headers.cookie == ""}
      next: return_unauthorized
  next: check_for_required_parameters

check_for_required_parameters:
  switch:
    - condition: ${incoming.body == null || incoming.body.active == null || incoming.body.metric == null || incoming.body.ordinality == null}
      next: return_incorrect_request
  next: extract_request_data

extract_request_data:
  assign:
    cookie: ${incoming.headers.cookie}
    active: ${incoming.body.active}
    metric: ${incoming.body.metric}
    ordinality: ${incoming.body.ordinality}
  next: check_if_authorized

check_if_authorized:
  template: templates/check-user-authority
  requestType: post
  headers:
    cookie: ${cookie}
  result: authority_result
  next: check_authority_result

check_authority_result:
  switch:
    - condition: ${authority_result !== "false"}
      next: update_metrics_preferences
  next: return_unauthorized     

update_metrics_preferences:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]:[#ANALYTICS_RESQL_PORT]/update-overview-metric-preferences"
    body:
      user_id_code: ${authority_result.idCode}
      active: ${active}
      metric: ${metric}
      ordinality: ${ordinality}
  result: result
  next: get_metrics_preferences

get_metrics_preferences:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]:[#ANALYTICS_RESQL_PORT]/overview-metric-preferences"
    body:
      user_id_code: ${authority_result.idCode}
  result: metrics
  next: return_value

return_value:
  return: ${metrics.response.body}
  next: end

return_unauthorized:
  status: 401
  return: 'unauthorized'
  next: end

return_incorrect_request:
  status: 400
  return: 'missing parameters'
  next: end
