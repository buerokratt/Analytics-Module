declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'SETTINGS'"
  method: post
  accepts: json
  returns: json
  namespace: analytics
  allowlist:
    body:
      - field: apiKey
        type: string
        description: "Body field 'apiKey'"
      - field: keyId
        type: string
        description: "Body field 'keyId'"
      - field: orgId
        type: string
        description: "Body field 'orgId'"

assign:
  assign:
    keyId: ${incoming.body.keyId}
    apiKey: ${incoming.body.apiKey}
    orgId: ${incoming.body.orgId}

deleteOdpKey:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/delete-odp-settings"
  result: delete

saveOdpKey:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/set-odp-settings"
    body:
      keyId: ${keyId}
      apiKey: ${apiKey}
      orgId: ${orgId}
  result: save

getKey:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/get-odp-settings"
  result: settings
  
verify:
  call: http.post
  args:
    url: "[#ANALYTICS_OPEN_DATA_SERVICE]/api/auth/key-login"
    headers:
      X-API-KEY: ${settings.response.body[0].odpKey}
  result: apiToken

check_response:
  switch:
    - condition: ${apiToken.response.statusCodeValue === 201}
      next: return_success

cleanupInvalidKey:
  call: http.post
  args:
    url: "[#ANALYTICS_RESQL]/delete-odp-settings"
  result: delete
  next: return_error

return_success:
  return: ${settings.response.body[0]}
  next: end

return_error:
  return: ${false}
  next: end
